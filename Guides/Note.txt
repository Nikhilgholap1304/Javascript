Concurrency means executing multiple tasks at the same time but not simultaneously. E.g. two tasks works in overlapping time periods.

Parallelism means performing two or more tasks simultaneously, e.g. performing multiple calculations at the same time.


an item's lexical scope is the place in which the item got created



//datatypes are based on memory allocation
Primitive datatypes->  call by value (string,number,boolean,null,undefined,BigInt,symbol) ->Stack memory

Reference/Non primitive data types -> call by reference ( array, object, function) -> heap memory



A variable may belong to one of the following scopes:

Global scope: The default scope for all code running in script mode.
Module scope: The scope for code running in module mode.
Function scope: The scope created with a function.

In addition, variables declared with let or const can belong to an additional scope:

Block scope: The scope created with a pair of curly braces (a block).
When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.

e.g
{
  let a = "BlockScope"
}
if <condition>{
  const a = "BlockScope"
}

let and const declarations can also be scoped to the block statement that they are declared in.

Javascript is single threaded and an synchronous language
single threaded - one command is processed at a time.
synchronous - line by line


Js working

üîµThe working of the JavaScript works on three phases:
1. Global Execution Context
2. Memory phase / Creation phase
3. Execution phase

üîµPhase 1: Global Execution Context
The value of `this` keyword is set to Global Execution Context (which is an empty Object in NODE environment, & window object in browser environment)

üîµPhase 2: Memory phase
During this phase, JS engine scans the code and assigns the initial values for the variables , functions, etc.. For variables they are 'undefined' and for functions they are set to their function definition

üîµPhase 3: Execution phase
After the creation phase completed, the execution phase begins where actual values of the variables are set. And when the functions are called it creates a new 'Function Execution' context which consists of two phases (they works same as explained above but only for the particular function scope):
1. Memory phase 
2. Execution phase 
üìùThe return value of the 'Function Execution' context is passed to the Global Execution Context



/Nullish Coalescing operator (??): null undefined

let val1;
val1 = 5 ?? 10 //if it neither null nor undefined then it will assign first value otherwise second

val2 = null ?? 10

console.log(val1)  //5
console.log(val2)  //10


  
In ES6, a safe integer is an integer in the range (‚àí2^53,2^53)

These integers are safe because there is a one-to-one mapping between the mathematical integers and their representations in JavaScript.

Beyond this range, JavaScript integers are unsafe, which means that or more mathematical integers are represented as the same JavaScript integer
