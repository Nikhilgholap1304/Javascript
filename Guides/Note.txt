Concurrency means executing multiple tasks at the same time but not simultaneously. E.g. two tasks works in overlapping time periods.

Parallelism means performing two or more tasks simultaneously, e.g. performing multiple calculations at the same time.


an item's lexical scope is the place in which the item got created



//datatypes are based on memory allocation
Primitive datatypes->  call by value (string,number,boolean,null,undefined,BigInt,symbol) ->Stack memory

Reference/Non primitive data types -> call by reference ( array, object, function) -> heap memory



A variable may belong to one of the following scopes:

Global scope: The default scope for all code running in script mode.
Module scope: The scope for code running in module mode.
Function scope: The scope created with a function.

In addition, variables declared with let or const can belong to an additional scope:

Block scope: The scope created with a pair of curly braces (a block).
When you declare a variable outside of any function, it is called a global variable, because it is available to any other code in the current document. When you declare a variable within a function, it is called a local variable, because it is available only within that function.

e.g
{
  let a = "BlockScope"
}
if <condition>{
  const a = "BlockScope"
}

let and const declarations can also be scoped to the block statement that they are declared in.

Javascript is single threaded and an synchronous language
single threaded - one command is processed at a time.
synchronous - line by line
